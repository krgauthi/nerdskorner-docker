name: Gemini Issue Fixer

on:
  issues:
    types: [labeled]

jobs:
  fix-the-issue:
    # Only run this workflow if the label is 'gemini-fix'
    if: github.event.label.name == 'gemini-fix'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate and Validate Code with Gemini API
        id: gemini
        run: |
          # Use curl to call the Gemini API directly
          API_RESPONSE=$(curl -s \
            -H 'Content-Type: application/json' \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Based on the following GitHub issue, please generate the full, corrected content for the docker-compose.yml file. Only output the raw YAML code and nothing else.\n\nIssue Title: ${{ github.event.issue.title }}\n\nIssue Body: ${{ github.event.issue.body }}"
                }]
              }],
              "safetySettings": [
                {
                  "category": "HARM_CATEGORY_HARASSMENT",
                  "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                  "category": "HARM_CATEGORY_HATE_SPEECH",
                  "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                  "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                  "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                  "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                  "threshold": "BLOCK_ONLY_HIGH"
                }
              ]
            }' \
            "[https://generativelace.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key=$](https://generativelace.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key=$){{ secrets.GEMINI_API_KEY }}")

          echo "--- RAW API RESPONSE ---"
          echo "$API_RESPONSE"
          echo "------------------------"

          # Safely extract the generated code using jq. The -e flag will cause it to exit with an error if the path doesn't exist.
          GENERATED_CODE=$(echo "$API_RESPONSE" | jq -e -r '.candidates[0].content.parts[0].text')

          if [ $? -ne 0 ]; then
            echo "Error: Could not extract content from Gemini API response. The response may have been empty or blocked by safety settings."
            exit 1
          fi

          # Clean the markdown code fence from the start and end of the string.
          # This handles optional language identifiers (like 'yaml') and surrounding whitespace.
          CLEANED_CODE=$(echo "$GENERATED_CODE" | sed -e 's/^[[:space:]]*

          # Ensure the target directory exists before writing the file
          mkdir -p compose
          echo "$CLEANED_CODE" > compose/docker-compose.yml
          echo "Cleaned YAML content written to compose/docker-compose.yml"

          # Final validation of the cleaned YAML file
          if ! python3 -c "import yaml; yaml.safe_load(open('compose/docker-compose.yml'))"; then
            echo "Error: Final generated content is not valid YAML after cleaning."
            exit 1
          fi
          
          echo "YAML validation successful."

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: Automated fix for issue #${{ github.event.issue.number }}"
          branch: "fix/issue-${{ github.event.issue.number }}"
          title: "Automated fix for issue #${{ github.event.issue.number }}"
          body: |
            This PR was automatically generated by a Gemini-powered GitHub Action to address issue #${{ github.event.issue.number }}.

            Please review the changes before merging.
          issue: ${{ github.event.issue.number }}
